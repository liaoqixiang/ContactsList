<!DOCTYPE html>
<html>
<head>
    <title></title>
    <meta charset="utf-8" />
</head>
<!--This ContactList app has all the requirements.-->
<body>
    <div id="contactscontainer" style="display:none">
        <!--Additional Requirements 1:Responsive-->
        <div id="contactList" class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <h1>Contacts List<i class="fa fa-search" id="confirmSearchBtn"></i></h1>
            <div class="ui-widget">
                <div class="input-group">
                    <input type="text" id="searchText" class="form-control" placeholder="Search" name="searchContacts">
                </div>
            </div>
            <div id="dataDisplay">
                <!--Requirement 5: HandleBar-->
                <script id="data-template" type="text/x-handlebars-template">
                    <!-- data is looked up on the global context, the one we pass to the compiled template -->
                    <!-- The #each helper iterates over an array of items. -->
                    {{#each data}}
                    <div class="liDiv" data-toggle="collapse" data-target="#{{id}}">
                        <a href="#">
                            <span class="glyphicon glyphicon-user"></span>
                        </a>
                        <!-- Here the name for individual person. So we can access its properties directly: -->
                        {{name}}
                    </div>

                    <!--Requirement 2: Here the Buniess card for individual person. So we can access its properties directly: -->
                    <div id="{{id}}" class="collapse detailCard">
                        <div class="firstIntro">
                            <h3>{{name}}</h3>
                            <p>&nbsp &nbsp {{company.bs}}</p>
                        </div>
                        <div class="bottomPart">
                            <div class="trangle"></div>
                            <div class="lastLineIntro">
                                <p class="innerIntro">{{phone}}&nbsp&nbsp|&nbsp&nbsp{{email}}<br>{{address.street}},&nbsp{{address.city}},&nbsp{{address.suite}}</p>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </script>
            </div>

            <!--sort by name-->
            <button type="button" id="btnSort" class="btn btn-primary">SortByName</button>

        </div>
    </div>

</body>

</html>

@section scripts{
    <script>
        //store Json data in global valuable
        var contacts;

        //Requirement 1: load ajax to get data
        $(document).ready(function () {
            $.ajax({
                type: "GET",
                url: "http://jsonplaceholder.typicode.com/users",
                success: function (result) {

                    contacts = result;//Bind the result to global value-contacts

                    //Additional Requirements 2: 'Busy' indication after ajax has been succeeded.
                    $("#loader").hide();
                    $("#contactscontainer").show();

                    var detailData = { data: result };// This is the default data, which is passed to the template

                    RenderWithHandleBar(detailData);//Requirement 5: Call the function, filling out the template

                    Search(result);//Bind the search function to it

                    $("#btnSort").click(Sort);//Additional Requirements:Bind the sorting function to it

                },
                error: function (jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    $("#contactscontainer").html(msg);
                },
                always: function () {
                    $("#loader").hide();
                }
            });

        });

        //Requirement 5: This is the template system-handleBar I use.
        function RenderWithHandleBar(detailData) {
            // Grab the template script
            var theTemplateScript = $("#data-template").html();

            // Compile the template
            var theTemplate = Handlebars.compile(theTemplateScript);

            // Pass our data to the template
            var theCompiledHtml = theTemplate(detailData);

            // Add the compiled html to the page
            $("#dataDisplay").append(theCompiledHtml);
        }

        //Additional Requirement 3: Basic Sorting
        function Sort() {
            var allData = $("#dataDisplay .liDiv");
            if (allData.length <= 1) {
                return;
            }
            contacts.sort(function (a, b) {
                if (a.name < b.name) return -1;
                if (a.name > b.name) return 1;
                return 0;
            });
            $("#dataDisplay div").remove();
            var detailData = { data: contacts };
            RenderWithHandleBar(detailData);
        }

        //Requirement 3: Basic Search Functionality- function ConfirmSearch and SearchCheck make Search Func more friendly.
        function Search(result) {
            nameList = [];
            for (var i = 0; i < result.length; i++) {
                nameList.push(result[i].name);
            }
            $("#searchText").autocomplete({
                source: nameList,
                search: function (event, ui) { $("#loader").show(); SearchCheck(result); },
                close: function (event, ui) { $("#loader").show(); ConfirmSearch(); },
                create: function (event, ui) { $("#loader").show(); SearchCheck(result); },
                focus: function (event, ui) { $("#loader").show(); SearchCheck(result); },
                open: function (event, ui) { $("#loader").show(); SearchCheck(result); },
                change: function (event, ui) { $("#loader").show(); ChangeCheck(result); }
            });
        }

        function ConfirmSearch() {
            var allData = $("#dataDisplay .liDiv");
            var searchResult = $("#searchText").val();
            if (searchResult.length == 0) {
                $("#loader").hide()
                return;
            }
            for (var i = 0; i < allData.length; i++) {
                var toBeDeleted = allData[i].innerText.trim();
                if (toBeDeleted !== searchResult) {
                    allData[i].remove();
                }
            }
            $("#loader").hide()
        }

        function SearchCheck(result) {
            var searchResult = $("#searchText").val();
            if (searchResult.length == 0) {
                $("#loader").hide()
                return;
            }
            $("#dataDisplay div").remove();
            var detailData = { data: result };
            RenderWithHandleBar(detailData);
            $("#loader").hide()
        }
        function ChangeCheck(result) {
            var searchResult = $("#searchText").val();
            if (searchResult.length == 0) {
                $("#dataDisplay div").remove();
                var detailData = { data: result };
                RenderWithHandleBar(detailData);
               
            }
            $("#loader").hide()
            
        }
    </script>


}
